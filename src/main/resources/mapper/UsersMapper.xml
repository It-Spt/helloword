<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spt.helloworld.dao.mapper.UsersMapper">
  <resultMap id="BaseResultMap" type="com.spt.helloworld.domain.Users">
    <id column="z_id" jdbcType="INTEGER" property="zId" />
    <result column="login_name" jdbcType="VARCHAR" property="loginName" />
    <result column="passwords" jdbcType="VARCHAR" property="passwords" />
    <result column="uname" jdbcType="VARCHAR" property="uname" />
    <result column="z_name" jdbcType="VARCHAR" property="zName" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="power" jdbcType="CHAR" property="power" />
    <result column="is_monery" jdbcType="CHAR" property="isMonery" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    z_id, login_name, passwords, uname, z_name, email, phone, power, is_monery
  </sql>

  <select id="login" parameterType="java.lang.String" resultType="String">
    select power
    from users
    where login_name=#{loginName} and passwords=#{passwords}
  </select>

  <select id="selectAll" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from users
  </select>

  <select id="selectByPower" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from users
    where power=#{power}
  </select>

  <select id="selectByUname" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from users
    where login_name=#{loginName}
  </select>

  <delete id="delByname" parameterType="java.lang.String">
    delete
    from users
    where login_name=#{loginName}
  </delete>

  <select id="selectByExample" parameterType="com.spt.helloworld.domain.UsersExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from users
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from users
    where z_id = #{zId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from users
    where z_id = #{zId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.spt.helloworld.domain.UsersExample">
    delete from users
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.spt.helloworld.domain.Users">
    insert into users (z_id, login_name, passwords, 
      uname, z_name, email, 
      phone, power, is_monery)
    values (#{zId,jdbcType=INTEGER}, #{loginName,jdbcType=VARCHAR}, #{passwords,jdbcType=VARCHAR}, 
      #{uname,jdbcType=VARCHAR}, #{zName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{power,jdbcType=CHAR}, #{isMonery,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.spt.helloworld.domain.Users">
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="zId != null">
        z_id,
      </if>
      <if test="loginName != null">
        login_name,
      </if>
      <if test="passwords != null">
        passwords,
      </if>
      <if test="uname != null">
        uname,
      </if>
      <if test="zName != null">
        z_name,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="power != null">
        power,
      </if>
      <if test="isMonery != null">
        is_monery,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="zId != null">
        #{zId,jdbcType=INTEGER},
      </if>
      <if test="loginName != null">
        #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="passwords != null">
        #{passwords,jdbcType=VARCHAR},
      </if>
      <if test="uname != null">
        #{uname,jdbcType=VARCHAR},
      </if>
      <if test="zName != null">
        #{zName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="power != null">
        #{power,jdbcType=CHAR},
      </if>
      <if test="isMonery != null">
        #{isMonery,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.spt.helloworld.domain.UsersExample" resultType="java.lang.Long">
    select count(*) from users
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update users
    <set>
      <if test="record.zId != null">
        z_id = #{record.zId,jdbcType=INTEGER},
      </if>
      <if test="record.loginName != null">
        login_name = #{record.loginName,jdbcType=VARCHAR},
      </if>
      <if test="record.passwords != null">
        passwords = #{record.passwords,jdbcType=VARCHAR},
      </if>
      <if test="record.uname != null">
        uname = #{record.uname,jdbcType=VARCHAR},
      </if>
      <if test="record.zName != null">
        z_name = #{record.zName,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.power != null">
        power = #{record.power,jdbcType=CHAR},
      </if>
      <if test="record.isMonery != null">
        is_monery = #{record.isMonery,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update users
    set z_id = #{record.zId,jdbcType=INTEGER},
      login_name = #{record.loginName,jdbcType=VARCHAR},
      passwords = #{record.passwords,jdbcType=VARCHAR},
      uname = #{record.uname,jdbcType=VARCHAR},
      z_name = #{record.zName,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      power = #{record.power,jdbcType=CHAR},
      is_monery = #{record.isMonery,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.spt.helloworld.domain.Users">
    update users
    <set>
      <if test="loginName != null">
        login_name = #{loginName,jdbcType=VARCHAR},
      </if>
      <if test="passwords != null">
        passwords = #{passwords,jdbcType=VARCHAR},
      </if>
      <if test="uname != null">
        uname = #{uname,jdbcType=VARCHAR},
      </if>
      <if test="zName != null">
        z_name = #{zName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="power != null">
        power = #{power,jdbcType=CHAR},
      </if>
      <if test="isMonery != null">
        is_monery = #{isMonery,jdbcType=CHAR},
      </if>
    </set>
    where z_id = #{zId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.spt.helloworld.domain.Users">
    update users
    set login_name = #{loginName,jdbcType=VARCHAR},
      passwords = #{passwords,jdbcType=VARCHAR},
      uname = #{uname,jdbcType=VARCHAR},
      z_name = #{zName,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      power = #{power,jdbcType=CHAR},
      is_monery = #{isMonery,jdbcType=CHAR}
    where z_id = #{zId,jdbcType=INTEGER}
  </update>
</mapper>